{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./components/Air Conditioning/AirConditioning.js","webpack:///./components/Device/Device.js","webpack:///./components/Light/Light.js","webpack:///./components/Smart House/SmartHouse.js","webpack:///./components/Tv/Tv.js","webpack:///./src/index.js","webpack:///./src/index.scss"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AAAA;AAA0C;;AAEnC,8BAA8B,qDAAM;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,KAAK,KAAK,yCAAyC;;AAEnD;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;AChPA;AAAA;AAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACvBA;AAAA;AAAA;AAA0C;;AAEnC,oBAAoB,qDAAM;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACzDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwC;AACD;AACyC;;AAEzE;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,4BAA4B,yCAAE;AAC9B;AACA,6BAA6B,+CAAQ;AACrC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,+BAA+B,kDAAK;AACpC;AACA;;AAEA;AACA,yCAAyC,iFAAe;AACxD;AACA,6BAA6B,0EAAQ;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;;;;;;;;;;;;ACtJA;AAAA;AAAA;AAAA;AAA0C;;AAEnC,iBAAiB,qDAAM;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,KAAK,KAAK,4BAA4B;;AAEtC;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,2CAA2C,uBAAuB;AAClE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,uBAAuB;AACpE;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,uBAAuB;AACpE;AACA,KAAK;;AAEL;AACA;AACA,6CAA6C,wBAAwB;AACrE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,wBAAwB;AACvE;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,wBAAwB;AACvE;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;AC/NA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAG8C;AACmC;AACxC;AACS;AAC5B;;AAEtB,kBAAkB,6EAAU;AAC5B,qBAAqB,oDAAE;AACvB,qBAAqB,6DAAK;AAC1B,qBAAqB,4FAAe;;AAEpC,2BAA2B,mFAAgB;AAC3C;;;;;;;;;;;;ACfA,yC","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"dist/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.js\");\n","import { Device } from \"../Device/Device\";\n\nexport class AirConditioning extends Device {\n  constructor(name, config) {\n    super(name);\n    this._name = name;\n    this._mode = [\"COOL\", \"HEAT\", \"DRY\", \"FAN\"];\n    this._currentTemperature = 20;\n    this._minTemperature = 15;\n    this._maxTemperature = 30;\n    this._currentFanSpeed = 3;\n    this._minFanSpeed = 1;\n    this._maxFanSpeed = 5;\n  }\n\n  static getDeviceName() {\n    //\n    return \"air_conditioning\";\n  }\n\n  static getHumanizedName() {\n    return \"Air Conditioning Device\";\n  }\n\n  getHumanizedName() {\n    return \"Air Conditioning\";\n  }\n\n  get fanSpeed() {\n    return this._currentFanSpeed;\n  }\n\n  get currentMode() {\n    return this._currentMode;\n  }\n  setSource(source) {\n    if (this._mode.indexOf(source) !== -1) {\n      this._currentMode = source;\n    }\n  }\n\n  get currentTemperature() {\n    return this._currentTemperature;\n  }\n\n  set currentTemperature(temperature) {\n    if (\n      temperature > this._minTemperature &&\n      temperature < this._maxTemperature\n    ) {\n      this._currentTemperature = temperature;\n    }\n  }\n\n  increaseTemperature() {\n    if (this._currentTemperature < this._maxTemperature) {\n      this._currentTemperature++;\n    }\n  }\n  decreaseTemperature() {\n    if (this._currentTemperature > this._minTemperature) {\n      this._currentTemperature--;\n    }\n  }\n  get currentFanSpeed() {\n    return this._currentFanSpeed;\n  }\n\n  set currentFanSpeed(speed) {\n    if (speed > this._minFanSpeed && speed < this._maxFanSpeed) {\n      this._currentFanSpeed = speed;\n    }\n  }\n\n  increaseFanSpeed() {\n    if (this._currentFanSpeed < this._maxFanSpeed) {\n      this._currentFanSpeed++;\n    }\n  }\n  decreaseFanSpeed() {\n    if (this._currentFanSpeed > this._minFanSpeed) {\n      this._currentFanSpeed--;\n    }\n  }\n}\n\nexport class RenderAC {\n  constructor(airConditioning, rootElement, smartHouse) {\n    this._airConditioning = airConditioning;\n    this._rootElement = rootElement;\n    this.smartHouse = smartHouse;\n  }\n\n  render() {\n    const airCondContainer = document.createElement(\"div\");\n    airCondContainer.className = \"ac\";\n\n    const airCondControlsContainer = document.createElement(\"div\");\n    airCondControlsContainer.className = \"ac__controls\";\n\n    const powerControls = document.createElement(\"div\");\n    powerControls.className = \"ac__controls-power\";\n\n    const acTemperatureControls = document.createElement(\"div\");\n    acTemperatureControls.className = \"ac__controls-volume\";\n\n    const acFanControls = document.createElement(\"div\");\n    acFanControls.className = \"ac__controls-channel\";\n\n    let deviceName = document.createElement(\"div\");\n    deviceName.innerText = `Device name: ${\n      this._airConditioning._name\n    } - ${this._airConditioning.getHumanizedName()}`;\n\n    let state = document.createElement(\"div\");\n    state.className = \"stateField\";\n    let switchState = () => {\n      state.innerText = `Device status: ${\n        this._airConditioning.isEnabledStatus ? \"On\" : \"Off\"\n      }`;\n    };\n\n    const setDeviceOn = document.createElement(\"button\");\n    setDeviceOn.className = \"ac__controls-power-on-btn button\";\n    setDeviceOn.type = \"button\";\n    setDeviceOn.innerHTML = \"ON\";\n    setDeviceOn.addEventListener(\"click\", () => {\n      this._airConditioning.setDeviceOn();\n      switchState();\n    });\n\n    const setDeviceOff = document.createElement(\"button\");\n    setDeviceOff.className = \"ac__controls-power-off-btn button\";\n    setDeviceOff.type = \"button\";\n    setDeviceOff.innerHTML = \"OFF\";\n    setDeviceOff.addEventListener(\"click\", () => {\n      this._airConditioning.setDeviceOff();\n      switchState();\n    });\n\n    let currentTemperature = document.createElement(\"div\");\n    let showCurrentTemperature = () => {\n      currentTemperature.innerText = `Temperature: ${\n        this._airConditioning.currentTemperature\n      }`;\n    };\n\n    const decreaseTemperature = document.createElement(\"button\");\n    decreaseTemperature.className = \"decrease_temp-btn button\";\n    decreaseTemperature.type = \"button\";\n    decreaseTemperature.innerHTML = \"temp-\";\n    decreaseTemperature.addEventListener(\"click\", () => {\n      if (this._airConditioning.isEnabledStatus === true) {\n        this._airConditioning.currentTemperature = this._airConditioning.decreaseTemperature();\n        currentTemperature.innerText = `Temperature: ${\n          this._airConditioning.currentTemperature\n        }`;\n      }\n    });\n\n    const increaseTemperature = document.createElement(\"button\");\n    increaseTemperature.className = \"decrease_volume button\";\n    increaseTemperature.type = \"button\";\n    increaseTemperature.innerHTML = \"temp+\";\n    increaseTemperature.addEventListener(\"click\", () => {\n      if (this._airConditioning.isEnabledStatus === true) {\n        this._airConditioning.currentTemperature = this._airConditioning.increaseTemperature();\n        currentTemperature.innerText = `Temperature: ${\n          this._airConditioning.currentTemperature\n        }`;\n      }\n    });\n\n    let currentFanSpeed = document.createElement(\"div\");\n    let showCurrentFanSpeed = () => {\n      currentFanSpeed.innerText = `Fan Speed: ${\n        this._airConditioning.currentFanSpeed\n      }`;\n    };\n\n    const decreaseFanSpeed = document.createElement(\"button\");\n    decreaseFanSpeed.className = \"decrease_channel button\";\n    decreaseFanSpeed.type = \"button\";\n    decreaseFanSpeed.innerHTML = \"sp-\";\n    decreaseFanSpeed.addEventListener(\"click\", () => {\n      if (this._airConditioning.isEnabledStatus === true) {\n        this._airConditioning.currentFanSpeed = this._airConditioning.decreaseFanSpeed();\n        currentFanSpeed.innerText = `Fan Speed: ${\n          this._airConditioning.currentFanSpeed\n        }`;\n      }\n    });\n\n    const increaseFanSpeed = document.createElement(\"button\");\n    increaseFanSpeed.className = \"decrease_channel button\";\n    increaseFanSpeed.type = \"button\";\n    increaseFanSpeed.innerHTML = \"sp+\";\n    increaseFanSpeed.addEventListener(\"click\", () => {\n      if (this._airConditioning.isEnabledStatus === true) {\n        this._airConditioning.currentFanSpeed = this._airConditioning.increaseFanSpeed();\n        currentFanSpeed.innerText = `Fan Speed: ${\n          this._airConditioning.currentFanSpeed\n        }`;\n      }\n    });\n\n    const deleteDeviceButton = document.createElement(\"button\");\n    deleteDeviceButton.className = \"delete_device-btn button\";\n    deleteDeviceButton.innerHTML = \"Delete Device\";\n    deleteDeviceButton.addEventListener(\"click\", () => {\n      this.smartHouse.deleteDeviceByName(this._airConditioning._name);\n      airCondContainer.remove();\n    });\n\n    switchState();\n    showCurrentTemperature();\n    showCurrentFanSpeed();\n    airCondContainer.appendChild(deviceName);\n\n    powerControls.appendChild(state);\n    powerControls.appendChild(setDeviceOn);\n    powerControls.appendChild(setDeviceOff);\n\n    acTemperatureControls.appendChild(currentTemperature);\n    acTemperatureControls.appendChild(decreaseTemperature);\n    acTemperatureControls.appendChild(increaseTemperature);\n\n    acFanControls.appendChild(currentFanSpeed);\n    acFanControls.appendChild(decreaseFanSpeed);\n    acFanControls.appendChild(increaseFanSpeed);\n\n    airCondControlsContainer.appendChild(powerControls);\n    airCondControlsContainer.appendChild(acTemperatureControls);\n    airCondControlsContainer.appendChild(acFanControls);\n\n    airCondContainer.appendChild(airCondControlsContainer);\n    airCondContainer.appendChild(deleteDeviceButton);\n\n    this._rootElement.appendChild(airCondContainer);\n  }\n}\n","export class Device {\n  constructor(name) {\n    this._name = name;\n    this._isEnabled = false;\n  }\n  get name() {\n    return (this._name = name);\n  }\n\n  get isEnabledStatus() {\n    return this._isEnabled;\n  }\n\n  setDeviceOn() {\n    if (!this._isEnabled) {\n      this._isEnabled = true;\n    }\n  }\n  setDeviceOff() {\n    if (this._isEnabled) {\n      this._isEnabled = false;\n    }\n  }\n}\n","import { Device } from \"../Device/Device\";\n\nexport class Light extends Device {\n  constructor(name) {\n    super(name);\n    this._currentColorTemperature = 3000;\n    this._minColorTemperature = 2000;\n    this._maxColorTemperature = 6500;\n    this._currentBrightness = 5;\n    this._minBrightness = 1;\n    this._maxBrightness = 10;\n  }\n\n  static getDeviceName() {\n    return \"light\";\n  }\n\n  static getHumanizedName() {\n    return \"Light Device\";\n  }\n\n  get currentColorTemperature() {\n    return this._currentColorTemperature;\n  }\n  get minColorTemperature() {\n    return this._minColorTemperature;\n  }\n  get maxColorTemperature() {\n    return this._maxColorTemperature;\n  }\n  increaseColorTemperature() {\n    if (this._currentColorTemperature < this._maxColorTemperature) {\n      this._currentColorTemperature++;\n    }\n  }\n  decreaseColorTemperature() {\n    if (this._currentColorTemperature > this._minColorTemperature) {\n      this._currentColorTemperature--;\n    }\n  }\n  get currentBrightness() {\n    return this._currentBrightness;\n  }\n  increaseBrightness() {\n    if (this._currentBrightness < this._maxBrightness) {\n      this._currentBrightness++;\n    }\n  }\n  decreaseBrightness() {\n    if (this._currentBrightness > this._minBrightness) {\n      this._currentBrightness--;\n    }\n  }\n  setNightMode() {\n    this._currentColorTemperature = 6500;\n    this._currentBrightness = 1;\n  }\n}\n","import { RenderTV, Tv } from \"../Tv/Tv\";\nimport { Light } from \"../Light/Light\";\nimport { AirConditioning, RenderAC } from \"../Air Conditioning/AirConditioning\";\n\nexport class SmartHouse {\n  constructor(name, address, owner) {\n    this._name = name;\n    this._address = address;\n    this._owner = owner;\n    this._devices = new Map();\n    this._register = new Map();\n  }\n\n  get name() {\n    return this._name;\n  }\n  get address() {\n    return this._address;\n  }\n  get owner() {\n    return this._owner;\n  }\n\n  get register() {\n    return this._register;\n  }\n\n  registerDevice(device) {\n    // Get Class like Light / Tv / AirConditioning\n    const name = device.getDeviceName();\n    this._register.set(name, device);\n  }\n\n  addNewDevice(device) {\n    if (this._devices.has(device._name) === false && device._name) {\n      this._devices.set(device._name, device);\n    } else {\n      throw new Error(\n        alert(\n          `This device has been already added or you didn't enter device name`\n        )\n      );\n    }\n  }\n  deleteDeviceByName(name) {\n    if (this._devices.has(name)) {\n      this._devices.delete(name);\n    } else {\n      throw new Error(alert(`There is no such device in the list`));\n    }\n  }\n  deleteAllDevices() {\n    this._devices.clear();\n  }\n  showAllDevices() {\n    return this._devices;\n  }\n  showDeviceByName(name) {\n    return this._devices.get(name);\n  }\n}\n\nexport class SmartHouseRender {\n  constructor(smartHouse) {\n    this.smartHouse = smartHouse;\n    this.root = document.getElementById(\"root\");\n  }\n\n  render() {\n    const registerDevice = document.createElement(\"div\");\n\n    const select = document.createElement(\"select\");\n    select.setAttribute(\"id\", \"select\");\n    select.className = \"select\";\n    const devices = this.smartHouse._register;\n    const defaultOption = document.createElement(\"option\");\n    defaultOption.text = \"Choose your device\";\n    select.add(defaultOption, null);\n\n    for (const device of devices) {\n      const [name, Device] = device;\n      const option = document.createElement(\"option\");\n\n      option.value = Device.getDeviceName();\n      option.text = Device.getHumanizedName();\n      select.add(option, null);\n    }\n\n    const inputField = document.createElement(\"input\");\n    inputField.type = \"text\";\n    inputField.className = \"deviceNameInput\";\n    const buttonAddDevice = document.createElement(\"button\");\n    buttonAddDevice.innerHTML = \"Add Device\";\n    buttonAddDevice.className = \"addDeviceBtn\";\n\n    select.addEventListener(\"change\", () => {\n      const selectIndex = document.getElementById(\"select\").options\n        .selectedIndex;\n      inputField.value = \"\";\n      registerDevice.appendChild(inputField);\n      registerDevice.appendChild(buttonAddDevice);\n\n      if (selectIndex === 0) {\n        inputField.remove();\n        buttonAddDevice.remove();\n      }\n    });\n\n    buttonAddDevice.addEventListener(\"click\", () => {\n      const selectIndex = document.getElementById(\"select\").options\n        .selectedIndex;\n      const currentOption = document.getElementById(\"select\").options[\n        selectIndex\n      ].value;\n      const deviceName = inputField.value;\n      inputField.value = \"\";\n\n      switch (currentOption) {\n        case \"tv-set\":\n          const newTV = new Tv(deviceName);\n          this.smartHouse.addNewDevice(newTV);\n          const viewTV = new RenderTV(\n            newTV,\n            document.getElementById(\"root\"),\n            this.smartHouse\n          );\n          viewTV.render();\n          break;\n\n        case \"light\":\n          const newLight = new Light(deviceName);\n          this.smartHouse.addNewDevice(newLight);\n          break;\n\n        case \"air_conditioning\":\n          const newAirConditioning = new AirConditioning(deviceName);\n          this.smartHouse.addNewDevice(newAirConditioning);\n          const viewAC = new RenderAC(\n            newAirConditioning,\n            document.getElementById(\"root\"),\n            this.smartHouse\n          );\n          viewAC.render();\n          break;\n      }\n    });\n\n    registerDevice.appendChild(select);\n    this.root.appendChild(registerDevice);\n  }\n}\n","import { Device } from \"../Device/Device\";\n\nexport class Tv extends Device {\n  constructor(name) {\n    super(name);\n    this._name = name;\n    this._sources = [\"TV antenna\", \"HDMI\", \"USB\", \"PC\"];\n    this._currentChannel = 1;\n    this._minChannelValue = 1;\n    this._maxChannelValue = 100;\n    this._currentVolume = 10;\n    this._minVolume = 0;\n    this._maxVolume = 50;\n  }\n\n  static getDeviceName() {\n    return \"tv-set\";\n  }\n\n  static getHumanizedName() {\n    return \"TV-Set Device\";\n  }\n\n  getHumanizedName() {\n    return \"TV-Set\";\n  }\n\n  get source() {\n    return this._sources;\n  }\n\n  get currentSource() {\n    return this._currentSource;\n  }\n  setSource(source) {\n    if (this._sources.indexOf(source) !== -1) {\n      this._currentSource = source;\n    }\n  }\n  get currentChannel() {\n    return this._currentChannel;\n  }\n  set currentChannel(channel) {\n    if (channel >= this._minChannelValue && channel <= this._maxChannelValue) {\n      this._currentChannel = channel;\n    }\n  }\n  increaseChannel() {\n    this._currentChannel++;\n    if (this._currentChannel > this._maxChannelValue) {\n      this._currentChannel = 1;\n    }\n  }\n  decreaseChannel() {\n    this._currentChannel--;\n    if (this._currentChannel < this._minChannelValue) {\n      this._currentChannel = 100;\n    }\n  }\n  get currentVolume() {\n    return this._currentVolume;\n  }\n\n  set currentVolume(value) {\n    if (value > this._minVolume && value < this._maxVolume) {\n      this._currentVolume = value;\n    }\n  }\n\n  increaseVolume() {\n    if (this._currentVolume < this._maxVolume) {\n      this._currentVolume++;\n    }\n  }\n  decreaseVolume() {\n    if (this._currentVolume > this._minVolume) {\n      this._currentVolume--;\n    }\n  }\n}\n\nexport class RenderTV {\n  constructor(tv, rootElement, SmartHouse) {\n    this._tv = tv;\n    this._rootElement = rootElement;\n    this.SmartHouse = SmartHouse;\n  }\n\n  render() {\n    const tvContainer = document.createElement(\"div\");\n    tvContainer.className = \"tv\";\n\n    const tvControlsContainer = document.createElement(\"div\");\n    tvControlsContainer.className = \"tv__controls\";\n\n    const powerControls = document.createElement(\"div\");\n    powerControls.className = \"tv__controls-power\";\n\n    const tvVolumeControls = document.createElement(\"div\");\n    tvVolumeControls.className = \"tv__controls-volume\";\n\n    const tvChannelControls = document.createElement(\"div\");\n    tvChannelControls.className = \"tv__controls-channel\";\n\n    let deviceName = document.createElement(\"div\");\n    deviceName.innerText = `Device name: ${\n      this._tv._name\n    } - ${this._tv.getHumanizedName()}`;\n\n    let state = document.createElement(\"div\");\n    state.className = \"stateField\";\n    let switchState = () => {\n      state.innerText = `Device status: ${\n        this._tv.isEnabledStatus ? \"On\" : \"Off\"\n      }`;\n    };\n\n    const setDeviceOn = document.createElement(\"button\");\n    setDeviceOn.className = \"tv__controls-power-on-btn button\";\n    setDeviceOn.type = \"button\";\n    setDeviceOn.innerHTML = \"ON\";\n    setDeviceOn.addEventListener(\"click\", () => {\n      this._tv.setDeviceOn();\n      switchState();\n    });\n\n    const setDeviceOff = document.createElement(\"button\");\n    setDeviceOff.className = \"tv__controls-power-off-btn button\";\n    setDeviceOff.type = \"button\";\n    setDeviceOff.innerHTML = \"OFF\";\n    setDeviceOff.addEventListener(\"click\", () => {\n      this._tv.setDeviceOff();\n      switchState();\n    });\n\n    let currentVolume = document.createElement(\"div\");\n    let showCurrentVolume = () => {\n      currentVolume.innerText = `Volume: ${this._tv.currentVolume}`;\n    };\n\n    const decreaseVolume = document.createElement(\"button\");\n    decreaseVolume.className = \"decrease_volume button\";\n    decreaseVolume.type = \"button\";\n    decreaseVolume.innerHTML = \" vol-\";\n    decreaseVolume.addEventListener(\"click\", () => {\n      if (this._tv.isEnabledStatus === true) {\n        this._tv.currentVolume = this._tv.decreaseVolume();\n        currentVolume.innerText = `Volume: ${this._tv.currentVolume}`;\n      }\n    });\n\n    const increaseVolume = document.createElement(\"button\");\n    increaseVolume.className = \"decrease_volume button\";\n    increaseVolume.type = \"button\";\n    increaseVolume.innerHTML = \"vol+\";\n    increaseVolume.addEventListener(\"click\", () => {\n      if (this._tv.isEnabledStatus === true) {\n        this._tv.currentVolume = this._tv.increaseVolume();\n        currentVolume.innerText = `Volume: ${this._tv.currentVolume}`;\n      }\n    });\n\n    let currentChannel = document.createElement(\"div\");\n    let showCurrentChannel = () => {\n      currentChannel.innerText = `Channel: ${this._tv.currentChannel}`;\n    };\n\n    const decreaseChannel = document.createElement(\"button\");\n    decreaseChannel.className = \"decrease_channel button\";\n    decreaseChannel.type = \"button\";\n    decreaseChannel.innerHTML = \"ch-\";\n    decreaseChannel.addEventListener(\"click\", () => {\n      if (this._tv.isEnabledStatus === true) {\n        this._tv.currentChannel = this._tv.decreaseChannel();\n        currentChannel.innerText = `Channel: ${this._tv.currentChannel}`;\n      }\n    });\n\n    const increaseChannel = document.createElement(\"button\");\n    increaseChannel.className = \"decrease_channel button\";\n    increaseChannel.type = \"button\";\n    increaseChannel.innerHTML = \"ch+\";\n    increaseChannel.addEventListener(\"click\", () => {\n      if (this._tv.isEnabledStatus === true) {\n        this._tv.currentChannel = this._tv.increaseChannel();\n        currentChannel.innerText = `Channel: ${this._tv.currentChannel}`;\n      }\n    });\n\n    const deleteDeviceButton = document.createElement(\"button\");\n    deleteDeviceButton.className = \"delete_device-btn button\";\n    deleteDeviceButton.innerHTML = \"Delete Device\";\n    deleteDeviceButton.addEventListener(\"click\", () => {\n      this.SmartHouse.deleteDeviceByName(this._tv._name);\n      tvContainer.remove();\n    });\n\n    switchState();\n    showCurrentVolume();\n    showCurrentChannel();\n    tvContainer.appendChild(deviceName);\n\n    powerControls.appendChild(state);\n    powerControls.appendChild(setDeviceOn);\n    powerControls.appendChild(setDeviceOff);\n\n    tvVolumeControls.appendChild(currentVolume);\n    tvVolumeControls.appendChild(decreaseVolume);\n    tvVolumeControls.appendChild(increaseVolume);\n\n    tvChannelControls.appendChild(currentChannel);\n    tvChannelControls.appendChild(decreaseChannel);\n    tvChannelControls.appendChild(increaseChannel);\n\n    tvControlsContainer.appendChild(powerControls);\n    tvControlsContainer.appendChild(tvVolumeControls);\n    tvControlsContainer.appendChild(tvChannelControls);\n\n    tvContainer.appendChild(tvControlsContainer);\n    tvContainer.appendChild(deleteDeviceButton);\n\n    this._rootElement.appendChild(tvContainer);\n  }\n}\n","import {\n  SmartHouse,\n  SmartHouseRender\n} from \"../components/Smart House/SmartHouse\";\nimport { AirConditioning } from \"../components/Air Conditioning/AirConditioning\";\nimport { Tv } from \"../components/Tv/Tv\";\nimport { Light } from \"../components/Light/Light\";\nimport \"./index.scss\";\n\nconst house = new SmartHouse(\"my house\", \"NY, 5th AV\", \"Oleg Shynkarenko\");\nhouse.registerDevice(Tv);\nhouse.registerDevice(Light);\nhouse.registerDevice(AirConditioning);\n\nconst smartHouseView = new SmartHouseRender(house);\nsmartHouseView.render();\n","// removed by extract-text-webpack-plugin"],"sourceRoot":""}